{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pitri\\\\Desktop\\\\nft-minter\\\\src\\\\utils\\\\interact.js\";\nimport { pinJSONToIPFS } from './pinata.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire('dotenv').config();\n\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconsole.log(process.env.REACT_APP_ALCHEMY_KEY);\n\nconst {\n  createAlchemyWeb3\n} = require(\"@alch/alchemy-web3\");\n\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nconst contractABI = require('../contract-abi.json');\n\nconst contractAddress = \"0x93d9553792F9B5f5c18C0528B4a45de6FB746Db3\";\nexport const mintNFT = async (url, name, description) => {\n  //error handling\n  if (url.trim() == \"\" || name.trim() == \"\" || description.trim() == \"\") {\n    return {\n      success: false,\n      status: \"❗Please make sure all fields are completed before minting.\"\n    };\n  } //make metadata\n\n\n  const metadata = new Object();\n  metadata.name = name;\n  metadata.image = url;\n  metadata.description = description; //pinata pin request\n\n  const pinataResponse = await pinJSONToIPFS(metadata);\n\n  if (!pinataResponse.success) {\n    return {\n      success: false,\n      status: \"😢 Something went wrong while uploading your tokenURI.\"\n    };\n  }\n\n  const tokenURI = pinataResponse.pinataUrl; //load smart contract\n\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress); //loadContract();\n  //set up your Ethereum transaction\n\n  const transactionParameters = {\n    to: contractAddress,\n    // Required except during contract publications.\n    from: window.ethereum.selectedAddress,\n    // must match user's active address.\n    'data': window.contract.methods.mint(window.ethereum.selectedAddress, tokenURI).encodeABI() //make call to NFT smart contract \n\n  }; //sign transaction via Metamask\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: [transactionParameters]\n    });\n    return {\n      success: true,\n      status: \"✅ Check out your transaction on Etherscan: https://mumbai.polygonscan.com/tx/\" + txHash\n    };\n  } catch (error) {\n    return {\n      success: false,\n      status: \"😥 Something went wrong: \" + error.message\n    };\n  }\n};\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0]\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download.html`,\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    };\n  }\n};\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\"\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\"\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download.html`,\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this)\n    };\n  }\n};","map":{"version":3,"sources":["C:/Users/pitri/Desktop/nft-minter/src/utils/interact.js"],"names":["pinJSONToIPFS","require","config","alchemyKey","process","env","REACT_APP_ALCHEMY_KEY","console","log","createAlchemyWeb3","web3","contractABI","contractAddress","mintNFT","url","name","description","trim","success","status","metadata","Object","image","pinataResponse","tokenURI","pinataUrl","window","contract","eth","Contract","transactionParameters","to","from","ethereum","selectedAddress","methods","mint","encodeABI","txHash","request","method","params","error","message","connectWallet","addressArray","obj","address","err","getCurrentWalletConnected","length"],"mappings":"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","sourcesContent":["import {pinJSONToIPFS} from './pinata.js'\r\nrequire('dotenv').config();\r\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconsole.log(process.env.REACT_APP_ALCHEMY_KEY);\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(alchemyKey); \r\n\r\nconst contractABI = require('../contract-abi.json')\r\nconst contractAddress = \"0x93d9553792F9B5f5c18C0528B4a45de6FB746Db3\";\r\n\r\nexport const mintNFT = async(url, name, description) => {\r\n\r\n    //error handling\r\n    if (url.trim() == \"\" || (name.trim() == \"\" || description.trim() == \"\")) { \r\n        return {\r\n            success: false,\r\n            status: \"❗Please make sure all fields are completed before minting.\",\r\n        }\r\n    }\r\n\r\n    //make metadata\r\n    const metadata = new Object();\r\n    metadata.name = name;\r\n    metadata.image = url;\r\n    metadata.description = description;\r\n\r\n    //pinata pin request\r\n    const pinataResponse = await pinJSONToIPFS(metadata);\r\n    if (!pinataResponse.success) {\r\n        return {\r\n            success: false,\r\n            status: \"😢 Something went wrong while uploading your tokenURI.\",\r\n        }\r\n    } \r\n    const tokenURI = pinataResponse.pinataUrl;  \r\n\r\n    //load smart contract\r\n    window.contract = await new web3.eth.Contract(contractABI, contractAddress);//loadContract();\r\n\r\n    //set up your Ethereum transaction\r\n    const transactionParameters = {\r\n        to: contractAddress, // Required except during contract publications.\r\n        from: window.ethereum.selectedAddress, // must match user's active address.\r\n        'data': window.contract.methods.mint(window.ethereum.selectedAddress, tokenURI).encodeABI() //make call to NFT smart contract \r\n    };\r\n\r\n    //sign transaction via Metamask\r\n    try {\r\n        const txHash = await window.ethereum\r\n            .request({\r\n                method: 'eth_sendTransaction',\r\n                params: [transactionParameters],\r\n            });\r\n        return {\r\n            success: true,\r\n            status: \"✅ Check out your transaction on Etherscan: https://mumbai.polygonscan.com/tx/\" + txHash\r\n        }\r\n    } catch (error) {\r\n        return {\r\n            success: false,\r\n            status: \"😥 Something went wrong: \" + error.message\r\n        }\r\n    }\r\n}\r\n\r\nexport const connectWallet = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      const obj = {\r\n        status: \"👆🏽 Write a message in the text-field above.\",\r\n        address: addressArray[0],\r\n      };\r\n      return obj;\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\nexport const getCurrentWalletConnected = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        const addressArray = await window.ethereum.request({\r\n          method: \"eth_accounts\",\r\n        });\r\n        if (addressArray.length > 0) {\r\n          return {\r\n            address: addressArray[0],\r\n            status: \"👆🏽 Write a message in the text-field above.\",\r\n          };\r\n        } else {\r\n          return {\r\n            address: \"\",\r\n            status: \"🦊 Connect to Metamask using the top right button.\",\r\n          };\r\n        }\r\n      } catch (err) {\r\n        return {\r\n          address: \"\",\r\n          status: \"😥 \" + err.message,\r\n        };\r\n      }\r\n    } else {\r\n      return {\r\n        address: \"\",\r\n        status: (\r\n          <span>\r\n            <p>\r\n              {\" \"}\r\n              🦊{\" \"}\r\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n                You must install Metamask, a virtual Ethereum wallet, in your\r\n                browser.\r\n              </a>\r\n            </p>\r\n          </span>\r\n        ),\r\n      };\r\n    }\r\n  };"]},"metadata":{},"sourceType":"module"}