{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/pitri/Desktop/nft-minter v2 (added recipient for NFT)/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/pitri/Desktop/nft-minter v2 (added recipient for NFT)/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/pitri/Desktop/nft-minter v2 (added recipient for NFT)/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from\"react\";import{connectWallet,getCurrentWalletConnected,mintNFT}from\"./utils/interact.js\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Minter=function Minter(props){//State variables\nvar _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),walletAddress=_useState2[0],setWallet=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),status=_useState4[0],setStatus=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),name=_useState6[0],setName=_useState6[1];var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),description=_useState8[0],setDescription=_useState8[1];var _useState9=useState(\"\"),_useState10=_slicedToArray(_useState9,2),hash=_useState10[0],setHash=_useState10[1];var _useState11=useState(\"\"),_useState12=_slicedToArray(_useState11,2),recipient=_useState12[0],setRecipient=_useState12[1];function addWalletListener(){if(window.ethereum){window.ethereum.on(\"accountsChanged\",function(accounts){if(accounts.length>0){setWallet(accounts[0]);setStatus(\"👆🏽 Write a message in the text-field above.\");}else{setWallet(\"\");setStatus(\"🦊 Connect to Metamask using the top right button.\");}});}else{setStatus(/*#__PURE__*/_jsxs(\"p\",{children:[\" \",\"\\uD83E\\uDD8A\",\" \",/*#__PURE__*/_jsx(\"a\",{rel:\"noreferrer\",target:\"_blank\",href:\"https://metamask.io/download.html\",children:\"You must install Metamask, a virtual Ethereum wallet, in your browser.\"})]}));}}useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _yield$getCurrentWall,address,status;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getCurrentWalletConnected();case 2:_yield$getCurrentWall=_context.sent;address=_yield$getCurrentWall.address;status=_yield$getCurrentWall.status;setWallet(address);setStatus(status);addWalletListener();case 8:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[]);var connectWalletPressed=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var walletResponse;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return connectWallet();case 2:walletResponse=_context2.sent;setStatus(walletResponse.status);setWallet(walletResponse.address);case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function connectWalletPressed(){return _ref.apply(this,arguments);};}();var onMintPressed=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var _yield$mintNFT,status;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return mintNFT(hash,name,description,recipient);case 2:_yield$mintNFT=_context3.sent;status=_yield$mintNFT.status;setStatus(status);case 5:case\"end\":return _context3.stop();}}},_callee3);}));return function onMintPressed(){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(\"div\",{className:\"Minter\",children:[/*#__PURE__*/_jsx(\"button\",{id:\"walletButton\",onClick:connectWalletPressed,children:walletAddress.length>0?\"Connected: \"+String(walletAddress).substring(0,6)+\"...\"+String(walletAddress).substring(38):/*#__PURE__*/_jsx(\"span\",{children:\"Connect Wallet\"})}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"h1\",{id:\"title\",children:\"\\uD83E\\uDDD9\\u200D\\u2642\\uFE0F NFTime Minter\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Simply add your asset's hash from Pinata, name, description and recipient then press \\\"Mint.\\\"\"}),/*#__PURE__*/_jsxs(\"form\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\uD83D\\uDDBC Hash of asset: \"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"e.g. QmSbF9xbradCfPDeV9y1K8e92CkkJ9rdeqePFrgFSfVp9y\",onChange:function onChange(event){return setHash(event.target.value);}}),/*#__PURE__*/_jsx(\"h2\",{children:\"\\uD83E\\uDD14 Name: \"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"e.g. My first NFT!\",onChange:function onChange(event){return setName(event.target.value);}}),/*#__PURE__*/_jsx(\"h2\",{children:\"\\u270D\\uFE0F Description: \"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"e.g. Even cooler than cryptokitties ;)\",onChange:function onChange(event){return setDescription(event.target.value);}}),/*#__PURE__*/_jsx(\"h2\",{children:\"Recipient: \"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"0x...\",onChange:function onChange(event){return setRecipient(event.target.value);}})]}),/*#__PURE__*/_jsx(\"button\",{id:\"mintButton\",onClick:onMintPressed,children:\"Mint NFT\"}),/*#__PURE__*/_jsx(\"p\",{id:\"status\",children:status})]});};export default Minter;","map":{"version":3,"sources":["C:/Users/pitri/Desktop/nft-minter v2 (added recipient for NFT)/src/Minter.js"],"names":["useEffect","useState","connectWallet","getCurrentWalletConnected","mintNFT","Minter","props","walletAddress","setWallet","status","setStatus","name","setName","description","setDescription","hash","setHash","recipient","setRecipient","addWalletListener","window","ethereum","on","accounts","length","fetchData","address","connectWalletPressed","walletResponse","onMintPressed","String","substring","event","target","value"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { connectWallet, getCurrentWalletConnected, mintNFT } from \"./utils/interact.js\";\n\nconst Minter = (props) => {\n\n  //State variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [hash, setHash] = useState(\"\");\n  const [recipient, setRecipient] = useState(\"\");\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus(\n        <p>\n          {\" \"}\n          🦊{\" \"}\n          <a rel=\"noreferrer\" target=\"_blank\" href={`https://metamask.io/download.html`}>\n            You must install Metamask, a virtual Ethereum wallet, in your\n            browser.\n          </a>\n        </p>\n      );\n    }\n  }\n \n  useEffect(() => {\n    async function fetchData() {\n      const { address, status } = await getCurrentWalletConnected();\n      setWallet(address);\n      setStatus(status);\n      addWalletListener();\n    }\n    \n    fetchData();\n  }, []);\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onMintPressed = async () => {\n    const { status } = await mintNFT(hash, name, description, recipient);\n    setStatus(status);\n  };\n\n  return (\n    <div className=\"Minter\">\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <br></br>\n      <h1 id=\"title\">🧙‍♂️ NFTime Minter</h1>\n      <p>\n        Simply add your asset's hash from Pinata, name, description and recipient then press \"Mint.\"\n      </p>\n      <form>\n        <h2>🖼 Hash of asset: </h2>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. QmSbF9xbradCfPDeV9y1K8e92CkkJ9rdeqePFrgFSfVp9y\"\n          onChange={(event) => setHash(event.target.value)}\n        />\n        <h2>🤔 Name: </h2>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. My first NFT!\"\n          onChange={(event) => setName(event.target.value)}\n        />\n        <h2>✍️ Description: </h2>\n        <input\n          type=\"text\"\n          placeholder=\"e.g. Even cooler than cryptokitties ;)\"\n          onChange={(event) => setDescription(event.target.value)}\n        />\n        <h2>Recipient: </h2>\n        <input\n          type=\"text\"\n          placeholder=\"0x...\"\n          onChange={(event) => setRecipient(event.target.value)}\n        />\n      </form>\n      <button id=\"mintButton\" onClick={onMintPressed}>\n        Mint NFT\n      </button>\n      <p id=\"status\">\n        {status}\n      </p>\n    </div>\n  );\n};\n\nexport default Minter;\n"]},"metadata":{},"sourceType":"module"}