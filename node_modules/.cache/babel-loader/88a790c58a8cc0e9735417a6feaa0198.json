{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/pitri/Desktop/nft-minter v2 (added recipient for NFT)/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/pitri/Desktop/nft-minter v2 (added recipient for NFT)/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{pinJSONToIPFS}from'./pinata.js';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";require('dotenv').config();var alchemyKey=process.env.REACT_APP_ALCHEMY_KEY;console.log(process.env.REACT_APP_ALCHEMY_KEY);var _require=require(\"@alch/alchemy-web3\"),createAlchemyWeb3=_require.createAlchemyWeb3;var web3=createAlchemyWeb3(alchemyKey);var contractABI=require('../contract-abi.json');var contractAddress=\"0x93d9553792F9B5f5c18C0528B4a45de6FB746Db3\";export var mintNFT=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(hash,name,description,recipient){var metadata,pinataResponse,tokenURI,transactionParameters,txHash;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(hash.trim()===\"\"||name.trim()===\"\"||description.trim()===\"\"||recipient.trim()===\"\")){_context.next=2;break;}return _context.abrupt(\"return\",{success:false,status:\"❗Please make sure all fields are completed before minting.\"});case 2://make metadata\nmetadata={};metadata.name=name;metadata.image=\"https://ipfs.io/ipfs/\"+hash;metadata.description=description;//pinata pin request\n_context.next=8;return pinJSONToIPFS(metadata);case 8:pinataResponse=_context.sent;if(pinataResponse.success){_context.next=11;break;}return _context.abrupt(\"return\",{success:false,status:\"😢 Something went wrong while uploading your tokenURI.\"});case 11:tokenURI=pinataResponse.pinataUrl;//load smart contract\n_context.next=14;return new web3.eth.Contract(contractABI,contractAddress);case 14:window.contract=_context.sent;//loadContract();\n//set up your Ethereum transaction\ntransactionParameters={to:contractAddress,// Required except during contract publications.\nfrom:window.ethereum.selectedAddress,// must match user's active address.\n'data':window.contract.methods.mint(recipient,tokenURI).encodeABI()//make call to NFT smart contract \n};//sign transaction via Metamask\n_context.prev=16;_context.next=19;return window.ethereum.request({method:'eth_sendTransaction',params:[transactionParameters]});case 19:txHash=_context.sent;return _context.abrupt(\"return\",{success:true,status:\"✅ Check out your transaction on Etherscan: https://mumbai.polygonscan.com/tx/\"+txHash});case 23:_context.prev=23;_context.t0=_context[\"catch\"](16);return _context.abrupt(\"return\",{success:false,status:\"😥 Something went wrong: \"+_context.t0.message});case 26:case\"end\":return _context.stop();}}},_callee,null,[[16,23]]);}));return function mintNFT(_x,_x2,_x3,_x4){return _ref.apply(this,arguments);};}();export var connectWallet=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var addressArray,obj;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!window.ethereum){_context2.next=14;break;}_context2.prev=1;_context2.next=4;return window.ethereum.request({method:\"eth_requestAccounts\"});case 4:addressArray=_context2.sent;obj={status:\"👆🏽 Write a message in the text-field above.\",address:addressArray[0]};return _context2.abrupt(\"return\",obj);case 9:_context2.prev=9;_context2.t0=_context2[\"catch\"](1);return _context2.abrupt(\"return\",{address:\"\",status:\"😥 \"+_context2.t0.message});case 12:_context2.next=15;break;case 14:return _context2.abrupt(\"return\",{address:\"\",status:/*#__PURE__*/_jsx(\"span\",{children:/*#__PURE__*/_jsxs(\"p\",{children:[\" \",\"\\uD83E\\uDD8A\",\" \",/*#__PURE__*/_jsx(\"a\",{rel:\"noreferrer\",target:\"_blank\",href:\"https://metamask.io/download.html\",children:\"You must install Metamask, a virtual Ethereum wallet, in your browser.\"})]})})});case 15:case\"end\":return _context2.stop();}}},_callee2,null,[[1,9]]);}));return function connectWallet(){return _ref2.apply(this,arguments);};}();export var getCurrentWalletConnected=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var addressArray;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!window.ethereum){_context3.next=17;break;}_context3.prev=1;_context3.next=4;return window.ethereum.request({method:\"eth_accounts\"});case 4:addressArray=_context3.sent;if(!(addressArray.length>0)){_context3.next=9;break;}return _context3.abrupt(\"return\",{address:addressArray[0],status:\"👆🏽 Write a message in the text-field above.\"});case 9:return _context3.abrupt(\"return\",{address:\"\",status:\"🦊 Connect to Metamask using the top right button.\"});case 10:_context3.next=15;break;case 12:_context3.prev=12;_context3.t0=_context3[\"catch\"](1);return _context3.abrupt(\"return\",{address:\"\",status:\"😥 \"+_context3.t0.message});case 15:_context3.next=18;break;case 17:return _context3.abrupt(\"return\",{address:\"\",status:/*#__PURE__*/_jsx(\"span\",{children:/*#__PURE__*/_jsxs(\"p\",{children:[\" \",\"\\uD83E\\uDD8A\",\" \",/*#__PURE__*/_jsx(\"a\",{rel:\"noreferrer\",target:\"_blank\",href:\"https://metamask.io/download.html\",children:\"You must install Metamask, a virtual Ethereum wallet, in your browser.\"})]})})});case 18:case\"end\":return _context3.stop();}}},_callee3,null,[[1,12]]);}));return function getCurrentWalletConnected(){return _ref3.apply(this,arguments);};}();","map":{"version":3,"sources":["C:/Users/pitri/Desktop/nft-minter v2 (added recipient for NFT)/src/utils/interact.js"],"names":["pinJSONToIPFS","require","config","alchemyKey","process","env","REACT_APP_ALCHEMY_KEY","console","log","createAlchemyWeb3","web3","contractABI","contractAddress","mintNFT","hash","name","description","recipient","trim","success","status","metadata","image","pinataResponse","tokenURI","pinataUrl","eth","Contract","window","contract","transactionParameters","to","from","ethereum","selectedAddress","methods","mint","encodeABI","request","method","params","txHash","message","connectWallet","addressArray","obj","address","getCurrentWalletConnected","length"],"mappings":"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","sourcesContent":["import {pinJSONToIPFS} from './pinata.js'\r\nrequire('dotenv').config();\r\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconsole.log(process.env.REACT_APP_ALCHEMY_KEY);\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(alchemyKey); \r\n\r\nconst contractABI = require('../contract-abi.json')\r\nconst contractAddress = \"0x93d9553792F9B5f5c18C0528B4a45de6FB746Db3\";\r\n\r\nexport const mintNFT = async(hash, name, description, recipient) => {\r\n\r\n    //error handling\r\n    if (hash.trim() === \"\" || (name.trim() === \"\" || description.trim() === \"\" || recipient.trim() === \"\")) { \r\n        return {\r\n            success: false,\r\n            status: \"❗Please make sure all fields are completed before minting.\",\r\n        }\r\n    }\r\n\r\n    //make metadata\r\n    const metadata = {};\r\n    metadata.name = name;\r\n    metadata.image = \"https://ipfs.io/ipfs/\" + hash;\r\n    metadata.description = description;\r\n\r\n    //pinata pin request\r\n    const pinataResponse = await pinJSONToIPFS(metadata);\r\n    if (!pinataResponse.success) {\r\n        return {\r\n            success: false,\r\n            status: \"😢 Something went wrong while uploading your tokenURI.\",\r\n        }\r\n    } \r\n    const tokenURI = pinataResponse.pinataUrl;  \r\n\r\n    //load smart contract\r\n    window.contract = await new web3.eth.Contract(contractABI, contractAddress);//loadContract();\r\n\r\n    //set up your Ethereum transaction\r\n    const transactionParameters = {\r\n        to: contractAddress, // Required except during contract publications.\r\n        from: window.ethereum.selectedAddress, // must match user's active address.\r\n        'data': window.contract.methods.mint(recipient, tokenURI).encodeABI() //make call to NFT smart contract \r\n    };\r\n\r\n    //sign transaction via Metamask\r\n    try {\r\n        const txHash = await window.ethereum\r\n            .request({\r\n                method: 'eth_sendTransaction',\r\n                params: [transactionParameters],\r\n            });\r\n        return {\r\n            success: true,\r\n            status: \"✅ Check out your transaction on Etherscan: https://mumbai.polygonscan.com/tx/\" + txHash\r\n        }\r\n    } catch (error) {\r\n        return {\r\n            success: false,\r\n            status: \"😥 Something went wrong: \" + error.message\r\n        }\r\n    }\r\n}\r\n\r\nexport const connectWallet = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      const obj = {\r\n        status: \"👆🏽 Write a message in the text-field above.\",\r\n        address: addressArray[0],\r\n      };\r\n      return obj;\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a rel=\"noreferrer\" target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\nexport const getCurrentWalletConnected = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        const addressArray = await window.ethereum.request({\r\n          method: \"eth_accounts\",\r\n        });\r\n        if (addressArray.length > 0) {\r\n          return {\r\n            address: addressArray[0],\r\n            status: \"👆🏽 Write a message in the text-field above.\",\r\n          };\r\n        } else {\r\n          return {\r\n            address: \"\",\r\n            status: \"🦊 Connect to Metamask using the top right button.\",\r\n          };\r\n        }\r\n      } catch (err) {\r\n        return {\r\n          address: \"\",\r\n          status: \"😥 \" + err.message,\r\n        };\r\n      }\r\n    } else {\r\n      return {\r\n        address: \"\",\r\n        status: (\r\n          <span>\r\n            <p>\r\n              {\" \"}\r\n              🦊{\" \"}\r\n              <a rel=\"noreferrer\" target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n                You must install Metamask, a virtual Ethereum wallet, in your\r\n                browser.\r\n              </a>\r\n            </p>\r\n          </span>\r\n        ),\r\n      };\r\n    }\r\n  };"]},"metadata":{},"sourceType":"module"}